default_prompt: |
  Analyse a single photo and respond exclusively with a valid JSON object—no extra text, comments, or code fences. 
  Keys must appear precisely in the order shown below, and all numeric outputs must be whole integers without units.
  If the main subject **is** food or drink (including packaged items such as a Coca‑Cola can, wrapped candy bar, or bottled drinks)
  First, decide if the main subject is edible. If it is not food or drink, return:
  {
  "error": "NOT A FOOD"
  }
  If it is food or drink, return:
  {
  "type": "food_processing",
  "dish_name": "<probable dish name>",
  "estimated_avg_calories": <integer>,
  "ingredients": ["<ingredient1>", "..."],
  "total_avg_weight": <integer>,
  "contains": {
  "proteins": <integer>,
  "fats": <integer>,
  "carbohydrates": <integer>,
  "sugar": <integer>
  }
  }
  Additional rules:
  Base calorie and macronutrient estimates on typical serving sizes from reliable nutritional references, assuming worst-case values (full-fat ingredients, all cooking oil absorbed, and all dressings or sauces fully consumed).
  Calorie and macro values must reflect a realistic scenario: full-fat ingredients, all oils absorbed, and sauces fully consumed. Use reliable nutritional references (USDA, NCCDB, McCance & Widdowson, etc.).
  Keys must appear precisely in the order shown. Do not include special characters like @, #, $, %, ^, &, *, (, ), [, ], {, }, |, \, ' in the response, food names, ingredients, etc
  Nutritional Logic:
  Base all estimates on reliable nutritional references (e.g., USDA FoodData Central, NCCDB).
  Assume a "worst-case" nutritional scenario: use full-fat and full-sugar ingredients, assume all cooking oil is absorbed, and that all visible dressings or sauces are consumed.
  Portion Size Estimation Hierarchy:
  Estimate weight and portion size using the following methods in order of priority:
  Known Volume/Weight: If the item is a packaged product with a visible label (e.g., "330ml can," "50g chocolate bar"), use that as the primary source for its weight.
  Visible Reference Objects: If visible, compare the food's size to everyday objects. Use the following standard dimensions: dinner plate (≈approximately 28 cm), dinner fork (≈approximately 19 cm), human hand (width ≈approximately 9 cm), and credit card (≈approximately 8.5 cm).
  Implied Culinary Standards: If no reference object is visible, estimate based on typical culinary standards for the identified dish (e.g., a standard single-serving pizza is ~250-350g, a restaurant steak serving is ~225g, a can of soda is 330g).
  Formatting and Character Rules:
  Numeric Values: Round every numeric value to the nearest whole number. Return as a plain integer without any units (e.g., "g" or "kcal"). The keys `total_avg_weight_g` and `contains_g` are named to clarify the unit without including it in the value.
  String Content: All strings (`dish_name` and `ingredients`) must only contain lowercase alphanumeric characters (a-z, 0-9) and spaces. Capitalize first letter of first word of dish_name and ingredients. Remove all other characters, such as punctuation, hyphens, or symbols.
  Spelling: Ensure all food and ingredient names are spelt correctly before applying formatting rules.
  Round every numeric value to the nearest whole number, return as plain integers with no “g” or “kcal” suffixes.
weight_prompt: |
  You receive the raw text returned by Google Cloud Vision for a photo of a weight scale. Extract a valid weight value in kilograms and reply only with JSON with no additional text.
  rules:
    The OCR may omit commas or decimal dots for example 753 could mean 75.3 Normalize any separator to a dot. If none is present treat the last digit as the decimal
    Acceptable weights are from 30 to 150 kilograms and you responce should in this range
    if weight is not in this range, respond with invalid_weight json structure
    Output exactly one of these JSON structures
  json_examples:
    valid_weight:
      type: weight_processing
      weight: numeric_value
    invalid_weight:
      error: INVALID_WEIGHT
get_recommendation: |
  You received a table of various foods and nutritional data. Analyze the data and:
  - Give general food recommendations based on food data.
  - Identify which foods are generally healthier and should be consumed more.
  - Identify which foods should be reduced or avoided for better health.
  - Respond only by JSON. No additional text.
  - For JSON response, send only keys and values.
  - Response should include 3 main fields in following order. Do not change order of fields in response:
  - 1) foods_to_reduce_or_avoid(dish_name, reason) provide 3 most harmful options
  - 2) healthier_foods(dish_name, reason) provide 3 most healthier options
  - 3) general_recommendations(key:value) 3 most important recommendation
