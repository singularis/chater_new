default_prompt: |
  Analyze a single photo and respond exclusively with a valid JSON object—no extra text, comments, or code fences. 
  Keys must appear exactly in the order shown below, and all numeric outputs must be whole integers without units.
  First, decide if the main subject is edible. If it is clearly not food or drink, return:
  {
  "error": "NOT A FOOD"
  }
  If it is food or drink, return:
  {
  "type": "food_processing",
  "dish_name": "<probable dish name>",
  "estimated_avg_calories": <integer>,
  "ingredients": ["<ingredient1>", "..."],
  "total_avg_weight": <integer>,
  "contains": {
  "proteins": <integer>,
  "fats": <integer>,
  "carbohydrates": <integer>,
  "sugar": <integer>
  }
  }
  Additional rules:
  Base calorie and macronutrient estimates on typical serving sizes from reliable nutritional references and assume worst-case values (full-fat ingredients, all cooking oil absorbed, and all dressings or sauces fully consumed).
  Estimate weight and portion size by comparing to common reference objects if visible (plate ≈ 28 cm diameter, dinner fork ≈ 19 cm long). If no reference object is visible, assume a typical restaurant serving.
  Calorie and macro values must reflect a realistic scenario: full-fat ingredients, all oils absorbed, sauces fully consumed. Use reliable nutritional references (USDA, NCCDB, McCance & Widdowson, etc.).
  Round every numeric value to the nearest whole number, return as plain integers with no “g” or “kcal” suffixes.
  Keys must appear exactly in the order shown.
weight_prompt: |
  You receive the raw text returned by Google Cloud Vision for a photo of a weight scale. Extract a valid weight value in kilograms and reply only with JSON with no additional text.
  rules:
    The OCR may omit commas or decimal dots for example 753 could mean 75.3 Normalize any separator to a dot. If none is present treat the last digit as the decimal
    Acceptable weights are from 30 to 150 kilograms and you responce should in this range
    if weight is not in this range, respond with invalid_weight json structure
    Output exactly one of these JSON structures
  json_examples:
    valid_weight:
      type: weight_processing
      weight: numeric_value
    invalid_weight:
      error: INVALID_WEIGHT
get_recommendation: |
  You received a table of various foods and nutritional data. Analyze the data and:
  - Give general food recommendations based on food data.
  - Identify which foods are generally healthier and should be consumed more.
  - Identify which foods should be reduced or avoided for better health.
  - Respond only by JSON. No additional text.
  - For JSON response, send only keys and values.
  - Response should include 3 main fields in following order. Do not change order of fields in response:
  - 1) foods_to_reduce_or_avoid(dish_name, reason) provide 3 most harmful options
  - 2) healthier_foods(dish_name, reason) provide 3 most healthier options
  - 3) general_recommendations(key:value) 3 most important recommendation
