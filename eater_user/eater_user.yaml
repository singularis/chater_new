- name: Deploy Kubernetes objects for eater application
  hosts: localhost
  gather_facts: no

  vars_files:
    - ../vars.yaml

  tasks:
    - name: Create eater Namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: eater
    - name: Deploy eater Deployment
      kubernetes.core.k8s:
        state: present
        namespace: eater
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: eater-users
            namespace: eater
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: eater-users
            template:
              metadata:
                labels:
                  app: eater-users
                annotations:
                  co.elastic.logs/enabled: "true"
              spec:
                # Prefer GPU nodes, fallback to other nodes
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      - weight: 100
                        preference:
                          matchExpressions:
                            - key: kubernetes.io/hostname
                              operator: In
                              values: ["racoon-gpu"]
                      - weight: 90
                        preference:
                          matchExpressions:
                            - key: accelerator
                              operator: In
                              values: ["racoon"]
                containers:
                  - name: eater-users
                    image: docker.io/singularis314/eater_users:0.1
                    imagePullPolicy: Always
                    env:
                      - name: BOOTSTRAP_SERVER
                        value: "{{ vars.BOOTSTRAP_SERVER }}"
                      - name: POSTGRES_USER
                        value: "{{ vars.EATER.DB_NAME }}"
                      - name: POSTGRES_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: "{{ vars.EATER.DB_PASSWORD }}"
                            key: password
                      - name: POSTGRES_DB
                        value: "{{ vars.EATER.DB_NAME }}"
                      - name: POSTGRES_HOST
                        value: "{{ vars.EATER.POSTGRES_HOST }}"
                      - name: EATER_SECRET_KEY
                        value: "{{ vars.EATER_SECRET_KEY }}"
                      - name: REDIS_ENDPOINT
                        value: "{{ vars.REDIS_ENDPOINT }}"
                    ports:
                      - containerPort: 8000
                        name: http
                    resources:
                      requests:
                        memory: "128Mi"
                        cpu: "100m"
                      limits:
                        memory: "256Mi"
                        cpu: "200m"
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 8000
                      initialDelaySeconds: 30
                      periodSeconds: 300
                    readinessProbe:
                      httpGet:
                        path: /ready
                        port: 8000
                      initialDelaySeconds: 5
                      periodSeconds: 5

    - name: Create eater Service
      kubernetes.core.k8s:
        state: present
        namespace: eater
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: eater-users-service
            namespace: eater
          spec:
            selector:
              app: eater-users
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8000
                name: http
            type: ClusterIP